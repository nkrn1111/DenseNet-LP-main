#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Dec 26, 2021 02:12:51 AM +0200  platform: Windows NT
import os
import shutil
import sys
import tkinter as tk
import tkinter.messagebox as box
import tkinter.ttk as ttk
import webbrowser as browser
from tkinter import font, filedialog
from tkinter.constants import *
from tkinter.filedialog import askopenfilename

import PreProcess
import source
import train_model
import unknown
from source import GitHub, GishaText_9


def createWindow(width: int, height: int, title: str, root):
    # Create Window Instance and compute position and dimensions
    if root == None:
        window = tk.Tk()
    else:
        window = tk.Toplevel(root, bg="white")
    geometry_settings = "%dx%d+%d+%d" % (
        width, height, (window.winfo_screenwidth() - width) / 2, (window.winfo_screenheight() - height) / 2)

    # Basic Window Settings
    window.geometry(geometry_settings)
    window.wm_resizable(False, False)
    window.wm_title(title)

    # Return Instance
    return window


'''create the instruction window from the menu'''


def InstructionsWindow(root: tk.Toplevel, lebelString, about_header, about_footer, width, height):
    instructions = createWindow(width, height, lebelString, root)

    # About Window Content
    header = tk.Label(master=instructions, text=about_header, font=GishaText_9, bg="white").pack(fill='both')
    repository_link = tk.Label(master=instructions, text="link for GitHub", fg="Blue", cursor="hand2", bg="white")
    repository_link.bind("<Button-1>", lambda e: browser.open_new(GitHub))

    footer = tk.Label(master=instructions, text=about_footer, font=GishaText_9, bg="white").pack(fill='both')
    # Display About Window
    repository_link.pack()
    instructions.mainloop()


def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, Gui
    _top1 = root
    Gui = unknown.Toplevel1(_top1)
    root.mainloop()


def ExitFunc(*args):
    print('unknown_support.ExitFunc')
    root.destroy()
    sys.stdout.flush()


def ExportPreProccessing(*args):
    print('unknown_support.ExportPreProccessing')
    os.chdir('../')
    MainPath = os.getcwd()
    print (os.getcwd())
    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(MainPath):
        if not copyFolder('data',directory_path_string , MainPath) or \
                not copyFolder('graph', directory_path_string, MainPath) or \
                not copyFolder('Gui', directory_path_string, MainPath) or \
                not copyFolder('images', directory_path_string, MainPath) or \
                not copyFolder('models', directory_path_string, MainPath) or \
                not copyFolder('results', directory_path_string, MainPath): \
                print("Error")


def HelpFunc(*args):
    print('unknown_support.HelpFunc')
    for arg in args:
        print('another arg:', arg)
    sys.stdout.flush()


def LoadNewGraph(*args):
    print('unknown_support.LoadNewGraph')
    source.Graph_absoloute_path = askopenfilename(initialdir="C:/Users/",
                                                  filetypes=(("Text File", "*.txt"), ("All Files", "*.*")),
                                                  title="Choose a Graph."
                                                  )
    source.Graph_name = os.path.basename(source.Graph_absoloute_path)
    print(source.Graph_absoloute_path)
    print(source.Graph_name)
    sys.stdout.flush()


def validateFields():
    ErrorMessage = "You Must set all the Fields"
    K = Gui.TCombobox1.get()
    Dimenstion = Gui.Dimenstion_entry.get()
    Distance = Gui.DistanceEntry.get()
    RemovedEdgePrecentage = Gui.RemovedEdgePrecentage_entry.get()
    Missing_Fields = False
    if K == "":
        ErrorMessage = ErrorMessage + "\nK is empty"
        Missing_Fields = True
    if Dimenstion == "":
        ErrorMessage = ErrorMessage + "\nDimenstion is empty"
        Missing_Fields = True
    if Distance == "":
        ErrorMessage = ErrorMessage + "\nH-hop Distance is empty"
        Missing_Fields = True
    if RemovedEdgePrecentage == "":
        ErrorMessage = ErrorMessage + "\nRemoved Edge Precentage is empty"
        Missing_Fields = True
    if source.Graph_name == "":
        ErrorMessage = ErrorMessage + "\nGraph is not loaded"
        Missing_Fields = True
    if Missing_Fields:
        printError(ErrorMessage)
        return False
    else:
        source.K = K
        source.distance = Distance
        source.percentage_of_edges_to_remove = float(RemovedEdgePrecentage)
        source.percentage_of_negative_class_additions = 1 - float(RemovedEdgePrecentage)
        return True


def RunPreProccessing(*args):
    if validateFields():
        try:
            Gui.TProgressbar1['maximum'] = 100
        except Exception as e:
            print(e)
            print("Testttttttttttttttttttttttttttttt")
        print('unknown_support.RunPreProccessing')
        source.progress_cnt = source.progress_cnt + 1
        Gui.TProgressbar1['value'] = source.progress_cnt % int(100)
        Gui.TProgressbar1.update()
        PreProcess.runPreProcess(source.Graph_name)
        #sys.stdout.flush()







'''initialize the progress bar Max value'''


def InitProgressBar(*args):
    print(os.getcwd())
    for arg in args:
        size=arg
        print('another arg:', arg)
    try:
        Gui.TProgressbar1['maximum'] = size + 20
    except Exception as e:
        print(e)
        printError(e)
        print("Error while Initialize Progress Bar")



'''Update the progress bar'''


def updateProgressBar(size,end):
    try:
        if end == 0 :
            source.progress_cnt = source.progress_cnt + 1
            Gui.TProgressbar1['value'] = source.progress_cnt % int(size+20)
            Gui.TProgressbar1.update()
        else:
            Gui.TProgressbar1['value'] = int(size + 20)
            Gui.TProgressbar1.update()
            Gui.PreProccessingList.insert("end","Pre Processing stage is Done")
    except Exception as e:
        print(e)
        printError(e)
    return

if __name__ == '__main__':
    unknown.start_up()


def updateOutputData(data):
    Gui.PreProccessingList.insert("end",data)


def printError(ErrorMessage):
    box.showerror('Error', ErrorMessage)


def copyFolder(folder_name, MainPath, directory_path):
    src = os.path.join(directory_path, folder_name)
    dst = os.path.join(MainPath,folder_name)
    if not os.path.isdir(dst):
        try:
            shutil.copytree(src,dst)
        except Exception as e:
            print(e)
            printError(e)
    else:
        print("the folder:"+folder_name+" already exist in path: "+dst)
        printError("the folder:"+folder_name+" already exist in path: "+dst)
        return False
    return True


def TrainImportData():
    os.chdir('../')
    Batch_size = Gui.batchCombobox.get()
    directory_path_string = filedialog.askdirectory(initialdir=os.getcwd(), title="request_string")
    if ValiditeFolders(directory_path_string):
        MainPath=os.getcwd()
        if not copyFolder('data',MainPath,directory_path_string) or \
        not copyFolder('graph', MainPath, directory_path_string) or \
        not copyFolder('Gui', MainPath, directory_path_string) or \
        not copyFolder('images', MainPath, directory_path_string) or \
        not copyFolder('models', MainPath, directory_path_string) or \
        not copyFolder('results', MainPath, directory_path_string): \
            print("Error")
    elif Batch_size == "":
        print("you must set Batch Size Field")
        printError("you must set Batch Size Field")

def RunTraining():
    os.chdir('../')
    Batch_size = Gui.batchCombobox.get()
    if Batch_size == "":
        print("you must set Batch Size Field")
        printError("you must set Batch Size Field")
    else:
        source.batch_size=int(Batch_size)
        train_model.startTrain()
    os.chdir('/Gui')



def ValiditeFolders(path) :
    ErrorMessage = "seems that you have missing folders"
    DirectortList=os.listdir(path)
    missFolder=False
    print(DirectortList)
    if "data" not in DirectortList:
        ErrorMessage= ErrorMessage + "\ndata folder Not found"
        print ("data folder Not found")
        missFolder=True
    if "graph" not in DirectortList:
        ErrorMessage = ErrorMessage + "\ngraph folder Not found"
        print("graph folder Not found")
        missFolder = True
    if "Gui" not in DirectortList:
        ErrorMessage = ErrorMessage + "\nGui folder Not found"
        print("Gui folder Not found")
        missFolder = True
    if "images" not in DirectortList:
        ErrorMessage = ErrorMessage + "\nimages folder Not found"
        print("images folder Not found")
        missFolder = True
    if "models" not in DirectortList:
        ErrorMessage = ErrorMessage + "\nmodels folder Not found"
        print("models folder Not found")
        missFolder = True
    if "results" not in DirectortList:
        ErrorMessage = ErrorMessage + "\nresults folder Not found"
        print("results folder Not found")
        missFolder = True
    if missFolder:
        printError(ErrorMessage)
        return False
    else:
        return True


def UpdateTrainingListBox(data):
    Gui.TrainingList.insert("end", data)

def ExportTrainResults():
    print("export button is pressed!!")